---

---

<div class="bg-orbs">
  <div id="bg-orbs"></div>
</div>

<style lang="scss">
  .bg-orbs {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
  }

  :global(.orb-white) {
    position: absolute;
    width: var(--size);
    height: var(--size);
    border-radius: 50%;
    background: radial-gradient(
      circle,
      rgba(255, 255, 255, 1) 0%,
      rgba(255, 255, 255, 0) 100%
    );
    box-shadow:
      0 0 calc(var(--size) * 0.5) rgba(255, 255, 255, 0.6),
      0 0 calc(var(--size) * 1) rgba(255, 255, 255, 0.4),
      0 0 calc(var(--size) * 2) rgba(255, 255, 255, 0.3),
      0 0 calc(var(--size) * 4) rgba(255, 255, 255, 0.1);
    animation: orbFloat var(--duration) linear infinite;
    animation-delay: var(--delay);
    opacity: 0;
  }

  @keyframes orbFloat {
    0% {
      left: var(--start-x);
      top: var(--start-y);
      opacity: 0.8;
      transform: scale(1);
    }

    100% {
      left: var(--end-x);
      top: var(--end-y);
      opacity: 0.8;
      transform: scale(1);
    }
  }
</style>

<script>
  // Astro では script タグでクライアントサイド JavaScript を実行
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("bg-orbs");
    if (!container) return;

    // レスポンシブサイズを取得する関数
    function getResponsiveSize() {
      const width = window.innerWidth;
      if (width <= 768) {
        return "4rem"; // スマホ
      } else if (width <= 1024) {
        return "5.5rem"; // タブレット
      } else {
        return "7rem"; // PC
      }
    }

    const orbCount = 15;
    const newOrbs = [];

    for (let i = 0; i < orbCount; i++) {
      // 4つの斜め方向のみ
      const direction = Math.floor(Math.random() * 4);
      let startX, startY, endX, endY;

      switch (direction) {
        case 0: // 左下から右上（45度の角度）
          // 左辺または下辺からランダムに出現
          if (Math.random() > 0.5) {
            // 左辺から
            startX = -10;
            startY = Math.random() * 120;
            endX = startY + 120;
            endY = startY - 120;
          } else {
            // 下辺から
            startY = 110;
            startX = Math.random() * 120;
            endX = startX + 120;
            endY = startY - 120;
          }
          break;
        case 1: // 右上から左下（45度の角度）
          // 右辺または上辺からランダムに出現
          if (Math.random() > 0.5) {
            // 右辺から
            startX = 110;
            startY = Math.random() * 120;
            endX = startY - 120;
            endY = startY + 120;
          } else {
            // 上辺から
            startY = -10;
            startX = Math.random() * 120;
            endX = startX - 120;
            endY = startY + 120;
          }
          break;
        case 2: // 右下から左上（45度の角度）
          // 右辺または下辺からランダムに出現
          if (Math.random() > 0.5) {
            // 右辺から
            startX = 110;
            startY = Math.random() * 120;
            endX = startY - 120;
            endY = startY - 120;
          } else {
            // 下辺から
            startY = 110;
            startX = Math.random() * 120;
            endX = startX - 120;
            endY = startY - 120;
          }
          break;
        case 3: // 左上から右下（45度の角度）
          // 左辺または上辺からランダムに出現
          if (Math.random() > 0.5) {
            // 左辺から
            startX = -10;
            startY = Math.random() * 120;
            endX = startY + 120;
            endY = startY + 120;
          } else {
            // 上辺から
            startY = -10;
            startX = Math.random() * 120;
            endX = startX + 120;
            endY = startY + 120;
          }
          break;
      }

      const orb = {
        id: i,
        startX,
        startY,
        endX,
        endY,
        duration: 10 + Math.random() * 5,
        delay: Math.random() * 4,
        size: getResponsiveSize(),
      };

      // DOM要素として追加
      const orbElement = document.createElement("div");
      orbElement.className = "orb-white"; // CSSクラス名を適用
      orbElement.style.setProperty("--start-x", `${orb.startX}%`);
      orbElement.style.setProperty("--start-y", `${orb.startY}%`);
      orbElement.style.setProperty("--end-x", `${orb.endX}%`);
      orbElement.style.setProperty("--end-y", `${orb.endY}%`);
      orbElement.style.setProperty("--duration", `${orb.duration}s`);
      orbElement.style.setProperty("--delay", `${orb.delay}s`);
      orbElement.style.setProperty("--size", orb.size);

      container.appendChild(orbElement);
    }
  });
</script>
